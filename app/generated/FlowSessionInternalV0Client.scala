/**
 * Generated by apidoc - http://www.apidoc.me
 * Service version: 0.1.19
 * apidoc:0.11.72 http://www.apidoc.me/flow/session-internal/0.1.19/play_2_5_client
 */
package io.flow.session.internal.v0.models {

  sealed trait Session

  sealed trait SessionForm

  sealed trait SessionPutForm

  /**
   * If we found an experience for the given session, the localized information will
   * be presented here
   */
  case class LocalSession(
    country: io.flow.reference.v0.models.Country,
    currency: io.flow.reference.v0.models.Currency,
    language: io.flow.reference.v0.models.Language,
    experience: io.flow.common.v0.models.ExperienceSummary
  )

  case class OrganizationSession(
    id: String,
    attributes: Map[String, String],
    local: _root_.scala.Option[io.flow.session.internal.v0.models.LocalSession] = None
  ) extends Session

  case class OrganizationSessionForm(
    organization: String,
    ip: _root_.scala.Option[String] = None,
    experience: _root_.scala.Option[String] = None,
    country: _root_.scala.Option[String] = None,
    currency: _root_.scala.Option[String] = None,
    language: _root_.scala.Option[String] = None
  ) extends SessionForm

  case class OrganizationSessionPutForm(
    organization: String,
    experience: _root_.scala.Option[String] = None,
    country: _root_.scala.Option[String] = None,
    currency: _root_.scala.Option[String] = None,
    language: _root_.scala.Option[String] = None
  ) extends SessionPutForm

  case class ShopifySession(
    id: String,
    attributes: Map[String, String],
    local: _root_.scala.Option[io.flow.session.internal.v0.models.LocalSession] = None,
    shop: String,
    cart: io.flow.shopify.internal.v0.models.CartReference
  ) extends Session

  case class ShopifySessionForm(
    shop: String,
    ip: _root_.scala.Option[String] = None,
    experience: _root_.scala.Option[String] = None,
    country: _root_.scala.Option[String] = None,
    currency: _root_.scala.Option[String] = None,
    language: _root_.scala.Option[String] = None
  ) extends SessionForm

  case class ShopifySessionPutForm(
    shop: String,
    experience: _root_.scala.Option[String] = None,
    country: _root_.scala.Option[String] = None,
    currency: _root_.scala.Option[String] = None,
    language: _root_.scala.Option[String] = None
  ) extends SessionPutForm

  /**
   * Provides future compatibility in clients - in the future, when a type is added
   * to the union Session, it will need to be handled in the client code. This
   * implementation will deserialize these future types as an instance of this class.
   */
  case class SessionUndefinedType(
    description: String
  ) extends Session

  /**
   * Provides future compatibility in clients - in the future, when a type is added
   * to the union SessionForm, it will need to be handled in the client code. This
   * implementation will deserialize these future types as an instance of this class.
   */
  case class SessionFormUndefinedType(
    description: String
  ) extends SessionForm

  /**
   * Provides future compatibility in clients - in the future, when a type is added
   * to the union SessionPutForm, it will need to be handled in the client code. This
   * implementation will deserialize these future types as an instance of this class.
   */
  case class SessionPutFormUndefinedType(
    description: String
  ) extends SessionPutForm

}

package io.flow.session.internal.v0.models {

  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import io.flow.common.v0.models.json._
    import io.flow.error.v0.models.json._
    import io.flow.reference.v0.models.json._
    import io.flow.session.internal.v0.models.json._
    import io.flow.shopify.internal.v0.models.json._

    private[v0] implicit val jsonReadsUUID = __.read[String].map(java.util.UUID.fromString)

    private[v0] implicit val jsonWritesUUID = new Writes[java.util.UUID] {
      def writes(x: java.util.UUID) = JsString(x.toString)
    }

    private[v0] implicit val jsonReadsJodaDateTime = __.read[String].map { str =>
      import org.joda.time.format.ISODateTimeFormat.dateTimeParser
      dateTimeParser.parseDateTime(str)
    }

    private[v0] implicit val jsonWritesJodaDateTime = new Writes[org.joda.time.DateTime] {
      def writes(x: org.joda.time.DateTime) = {
        import org.joda.time.format.ISODateTimeFormat.dateTime
        val str = dateTime.print(x)
        JsString(str)
      }
    }

    implicit def jsonReadsSessionInternalLocalSession: play.api.libs.json.Reads[LocalSession] = {
      (
        (__ \ "country").read[io.flow.reference.v0.models.Country] and
        (__ \ "currency").read[io.flow.reference.v0.models.Currency] and
        (__ \ "language").read[io.flow.reference.v0.models.Language] and
        (__ \ "experience").read[io.flow.common.v0.models.ExperienceSummary]
      )(LocalSession.apply _)
    }

    def jsObjectLocalSession(obj: io.flow.session.internal.v0.models.LocalSession) = {
      play.api.libs.json.Json.obj(
        "country" -> io.flow.reference.v0.models.json.jsObjectCountry(obj.country),
        "currency" -> io.flow.reference.v0.models.json.jsObjectCurrency(obj.currency),
        "language" -> io.flow.reference.v0.models.json.jsObjectLanguage(obj.language),
        "experience" -> io.flow.common.v0.models.json.jsObjectExperienceSummary(obj.experience)
      )
    }

    implicit def jsonWritesSessionInternalLocalSession: play.api.libs.json.Writes[LocalSession] = {
      new play.api.libs.json.Writes[io.flow.session.internal.v0.models.LocalSession] {
        def writes(obj: io.flow.session.internal.v0.models.LocalSession) = {
          jsObjectLocalSession(obj)
        }
      }
    }

    implicit def jsonReadsSessionInternalOrganizationSession: play.api.libs.json.Reads[OrganizationSession] = {
      (
        (__ \ "id").read[String] and
        (__ \ "attributes").read[Map[String, String]] and
        (__ \ "local").readNullable[io.flow.session.internal.v0.models.LocalSession]
      )(OrganizationSession.apply _)
    }

    def jsObjectOrganizationSession(obj: io.flow.session.internal.v0.models.OrganizationSession) = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "attributes" -> play.api.libs.json.Json.toJson(obj.attributes)
      ) ++ (obj.local match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("local" -> jsObjectLocalSession(x))
      })
    }

    implicit def jsonReadsSessionInternalOrganizationSessionForm: play.api.libs.json.Reads[OrganizationSessionForm] = {
      (
        (__ \ "organization").read[String] and
        (__ \ "ip").readNullable[String] and
        (__ \ "experience").readNullable[String] and
        (__ \ "country").readNullable[String] and
        (__ \ "currency").readNullable[String] and
        (__ \ "language").readNullable[String]
      )(OrganizationSessionForm.apply _)
    }

    def jsObjectOrganizationSessionForm(obj: io.flow.session.internal.v0.models.OrganizationSessionForm) = {
      play.api.libs.json.Json.obj(
        "organization" -> play.api.libs.json.JsString(obj.organization)
      ) ++ (obj.ip match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("ip" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.experience match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("experience" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.country match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("country" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.currency match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("currency" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.language match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("language" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonReadsSessionInternalOrganizationSessionPutForm: play.api.libs.json.Reads[OrganizationSessionPutForm] = {
      (
        (__ \ "organization").read[String] and
        (__ \ "experience").readNullable[String] and
        (__ \ "country").readNullable[String] and
        (__ \ "currency").readNullable[String] and
        (__ \ "language").readNullable[String]
      )(OrganizationSessionPutForm.apply _)
    }

    def jsObjectOrganizationSessionPutForm(obj: io.flow.session.internal.v0.models.OrganizationSessionPutForm) = {
      play.api.libs.json.Json.obj(
        "organization" -> play.api.libs.json.JsString(obj.organization)
      ) ++ (obj.experience match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("experience" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.country match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("country" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.currency match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("currency" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.language match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("language" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonReadsSessionInternalShopifySession: play.api.libs.json.Reads[ShopifySession] = {
      (
        (__ \ "id").read[String] and
        (__ \ "attributes").read[Map[String, String]] and
        (__ \ "local").readNullable[io.flow.session.internal.v0.models.LocalSession] and
        (__ \ "shop").read[String] and
        (__ \ "cart").read[io.flow.shopify.internal.v0.models.CartReference]
      )(ShopifySession.apply _)
    }

    def jsObjectShopifySession(obj: io.flow.session.internal.v0.models.ShopifySession) = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "attributes" -> play.api.libs.json.Json.toJson(obj.attributes),
        "shop" -> play.api.libs.json.JsString(obj.shop),
        "cart" -> io.flow.shopify.internal.v0.models.json.jsObjectCartReference(obj.cart)
      ) ++ (obj.local match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("local" -> jsObjectLocalSession(x))
      })
    }

    implicit def jsonReadsSessionInternalShopifySessionForm: play.api.libs.json.Reads[ShopifySessionForm] = {
      (
        (__ \ "shop").read[String] and
        (__ \ "ip").readNullable[String] and
        (__ \ "experience").readNullable[String] and
        (__ \ "country").readNullable[String] and
        (__ \ "currency").readNullable[String] and
        (__ \ "language").readNullable[String]
      )(ShopifySessionForm.apply _)
    }

    def jsObjectShopifySessionForm(obj: io.flow.session.internal.v0.models.ShopifySessionForm) = {
      play.api.libs.json.Json.obj(
        "shop" -> play.api.libs.json.JsString(obj.shop)
      ) ++ (obj.ip match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("ip" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.experience match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("experience" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.country match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("country" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.currency match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("currency" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.language match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("language" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonReadsSessionInternalShopifySessionPutForm: play.api.libs.json.Reads[ShopifySessionPutForm] = {
      (
        (__ \ "shop").read[String] and
        (__ \ "experience").readNullable[String] and
        (__ \ "country").readNullable[String] and
        (__ \ "currency").readNullable[String] and
        (__ \ "language").readNullable[String]
      )(ShopifySessionPutForm.apply _)
    }

    def jsObjectShopifySessionPutForm(obj: io.flow.session.internal.v0.models.ShopifySessionPutForm) = {
      play.api.libs.json.Json.obj(
        "shop" -> play.api.libs.json.JsString(obj.shop)
      ) ++ (obj.experience match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("experience" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.country match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("country" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.currency match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("currency" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.language match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("language" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonReadsSessionInternalSession: play.api.libs.json.Reads[Session] = new play.api.libs.json.Reads[Session] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[Session] = {
        (js \ "discriminator").validate[String] match {
          case play.api.libs.json.JsError(msg) => play.api.libs.json.JsError(msg)
          case play.api.libs.json.JsSuccess(discriminator, _) => {
            discriminator match {
              case "shopify_session" => js.validate[io.flow.session.internal.v0.models.ShopifySession]
              case "organization_session" => js.validate[io.flow.session.internal.v0.models.OrganizationSession]
              case other => play.api.libs.json.JsSuccess(io.flow.session.internal.v0.models.SessionUndefinedType(other))
            }
          }
        }
      }
    }

    def jsObjectSession(obj: io.flow.session.internal.v0.models.Session) = {
      obj match {
        case x: io.flow.session.internal.v0.models.ShopifySession => jsObjectShopifySession(x) ++ play.api.libs.json.Json.obj("discriminator" -> "shopify_session")
        case x: io.flow.session.internal.v0.models.OrganizationSession => jsObjectOrganizationSession(x) ++ play.api.libs.json.Json.obj("discriminator" -> "organization_session")
        case other => {
          sys.error(s"The type[${other.getClass.getName}] has no JSON writer")
        }
      }
    }

    implicit def jsonWritesSessionInternalSession: play.api.libs.json.Writes[Session] = {
      new play.api.libs.json.Writes[io.flow.session.internal.v0.models.Session] {
        def writes(obj: io.flow.session.internal.v0.models.Session) = {
          jsObjectSession(obj)
        }
      }
    }

    implicit def jsonReadsSessionInternalSessionForm: play.api.libs.json.Reads[SessionForm] = new play.api.libs.json.Reads[SessionForm] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[SessionForm] = {
        (js \ "discriminator").validate[String] match {
          case play.api.libs.json.JsError(msg) => play.api.libs.json.JsError(msg)
          case play.api.libs.json.JsSuccess(discriminator, _) => {
            discriminator match {
              case "shopify_session_form" => js.validate[io.flow.session.internal.v0.models.ShopifySessionForm]
              case "organization_session_form" => js.validate[io.flow.session.internal.v0.models.OrganizationSessionForm]
              case other => play.api.libs.json.JsSuccess(io.flow.session.internal.v0.models.SessionFormUndefinedType(other))
            }
          }
        }
      }
    }

    def jsObjectSessionForm(obj: io.flow.session.internal.v0.models.SessionForm) = {
      obj match {
        case x: io.flow.session.internal.v0.models.ShopifySessionForm => jsObjectShopifySessionForm(x) ++ play.api.libs.json.Json.obj("discriminator" -> "shopify_session_form")
        case x: io.flow.session.internal.v0.models.OrganizationSessionForm => jsObjectOrganizationSessionForm(x) ++ play.api.libs.json.Json.obj("discriminator" -> "organization_session_form")
        case other => {
          sys.error(s"The type[${other.getClass.getName}] has no JSON writer")
        }
      }
    }

    implicit def jsonWritesSessionInternalSessionForm: play.api.libs.json.Writes[SessionForm] = {
      new play.api.libs.json.Writes[io.flow.session.internal.v0.models.SessionForm] {
        def writes(obj: io.flow.session.internal.v0.models.SessionForm) = {
          jsObjectSessionForm(obj)
        }
      }
    }

    implicit def jsonReadsSessionInternalSessionPutForm: play.api.libs.json.Reads[SessionPutForm] = new play.api.libs.json.Reads[SessionPutForm] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[SessionPutForm] = {
        (js \ "discriminator").validate[String] match {
          case play.api.libs.json.JsError(msg) => play.api.libs.json.JsError(msg)
          case play.api.libs.json.JsSuccess(discriminator, _) => {
            discriminator match {
              case "shopify_session_put_form" => js.validate[io.flow.session.internal.v0.models.ShopifySessionPutForm]
              case "organization_session_put_form" => js.validate[io.flow.session.internal.v0.models.OrganizationSessionPutForm]
              case other => play.api.libs.json.JsSuccess(io.flow.session.internal.v0.models.SessionPutFormUndefinedType(other))
            }
          }
        }
      }
    }

    def jsObjectSessionPutForm(obj: io.flow.session.internal.v0.models.SessionPutForm) = {
      obj match {
        case x: io.flow.session.internal.v0.models.ShopifySessionPutForm => jsObjectShopifySessionPutForm(x) ++ play.api.libs.json.Json.obj("discriminator" -> "shopify_session_put_form")
        case x: io.flow.session.internal.v0.models.OrganizationSessionPutForm => jsObjectOrganizationSessionPutForm(x) ++ play.api.libs.json.Json.obj("discriminator" -> "organization_session_put_form")
        case other => {
          sys.error(s"The type[${other.getClass.getName}] has no JSON writer")
        }
      }
    }

    implicit def jsonWritesSessionInternalSessionPutForm: play.api.libs.json.Writes[SessionPutForm] = {
      new play.api.libs.json.Writes[io.flow.session.internal.v0.models.SessionPutForm] {
        def writes(obj: io.flow.session.internal.v0.models.SessionPutForm) = {
          jsObjectSessionPutForm(obj)
        }
      }
    }
  }
}

package io.flow.session.internal.v0 {

  object Bindables {

    import play.api.mvc.{PathBindable, QueryStringBindable}
    import org.joda.time.{DateTime, LocalDate}
    import org.joda.time.format.ISODateTimeFormat
    import io.flow.session.internal.v0.models._

    // Type: date-time-iso8601
    implicit val pathBindableTypeDateTimeIso8601 = new PathBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    implicit val queryStringBindableTypeDateTimeIso8601 = new QueryStringBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    // Type: date-iso8601
    implicit val pathBindableTypeDateIso8601 = new PathBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )

    implicit val queryStringBindableTypeDateIso8601 = new QueryStringBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )



  }

}


package io.flow.session.internal.v0 {

  object Constants {

    val Namespace = "io.flow.session.internal.v0"
    val UserAgent = "apidoc:0.11.72 http://www.apidoc.me/flow/session-internal/0.1.19/play_2_5_client"
    val Version = "0.1.19"
    val VersionMajor = 0

  }

  class Client(
    ws: play.api.libs.ws.WSClient,
    val baseUrl: String,
    auth: scala.Option[io.flow.session.internal.v0.Authorization] = None,
    defaultHeaders: Seq[(String, String)] = Nil
  ) extends interfaces.Client {
    import io.flow.common.v0.models.json._
    import io.flow.error.v0.models.json._
    import io.flow.reference.v0.models.json._
    import io.flow.session.internal.v0.models.json._
    import io.flow.shopify.internal.v0.models.json._

    private[this] val logger = play.api.Logger("io.flow.session.internal.v0.Client")

    logger.info(s"Initializing io.flow.session.internal.v0.Client for url $baseUrl")

    def sessions: Sessions = Sessions

    object Sessions extends Sessions {
      override def getBySession(
        session: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.session.internal.v0.models.Session] = {
        _executeRequest("GET", s"/sessions/${play.utils.UriEncoding.encodePathSegment(session, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.session.internal.v0.Client.parseJson("io.flow.session.internal.v0.models.Session", r, _.validate[io.flow.session.internal.v0.models.Session])
          case r => throw new io.flow.session.internal.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def post(
        sessionForm: io.flow.session.internal.v0.models.SessionForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.session.internal.v0.models.Session] = {
        val payload = play.api.libs.json.Json.toJson(sessionForm)

        _executeRequest("POST", s"/sessions", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 201 => _root_.io.flow.session.internal.v0.Client.parseJson("io.flow.session.internal.v0.models.Session", r, _.validate[io.flow.session.internal.v0.models.Session])
          case r if r.status == 404 => throw new io.flow.session.internal.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw new io.flow.session.internal.v0.errors.GenericErrorResponse(r)
          case r => throw new io.flow.session.internal.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 201, 404, 422")
        }
      }

      override def putBySession(
        session: String,
        sessionPutForm: io.flow.session.internal.v0.models.SessionPutForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.session.internal.v0.models.Session] = {
        val payload = play.api.libs.json.Json.toJson(sessionPutForm)

        _executeRequest("PUT", s"/sessions/${play.utils.UriEncoding.encodePathSegment(session, "UTF-8")}", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.session.internal.v0.Client.parseJson("io.flow.session.internal.v0.models.Session", r, _.validate[io.flow.session.internal.v0.models.Session])
          case r if r.status == 404 => throw new io.flow.session.internal.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw new io.flow.session.internal.v0.errors.GenericErrorResponse(r)
          case r => throw new io.flow.session.internal.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 404, 422")
        }
      }

      override def putResetBySession(
        session: String,
        sessionForm: io.flow.session.internal.v0.models.SessionForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.session.internal.v0.models.Session] = {
        val payload = play.api.libs.json.Json.toJson(sessionForm)

        _executeRequest("PUT", s"/sessions/${play.utils.UriEncoding.encodePathSegment(session, "UTF-8")}/reset", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.session.internal.v0.Client.parseJson("io.flow.session.internal.v0.models.Session", r, _.validate[io.flow.session.internal.v0.models.Session])
          case r if r.status == 404 => throw new io.flow.session.internal.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw new io.flow.session.internal.v0.errors.GenericErrorResponse(r)
          case r => throw new io.flow.session.internal.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 404, 422")
        }
      }
    }

    def _requestHolder(path: String): play.api.libs.ws.WSRequest = {
      
      val holder = ws.url(baseUrl + path).withHeaders(
        "User-Agent" -> Constants.UserAgent,
        "X-Apidoc-Version" -> Constants.Version,
        "X-Apidoc-Version-Major" -> Constants.VersionMajor.toString
      ).withHeaders(defaultHeaders : _*)
      auth.fold(holder) {
        case Authorization.Basic(username, password) => {
          holder.withAuth(username, password.getOrElse(""), play.api.libs.ws.WSAuthScheme.BASIC)
        }
        case a => sys.error("Invalid authorization scheme[" + a.getClass + "]")
      }
    }

    def _logRequest(method: String, req: play.api.libs.ws.WSRequest)(implicit ec: scala.concurrent.ExecutionContext): play.api.libs.ws.WSRequest = {
      val queryComponents = for {
        (name, values) <- req.queryString
        value <- values
      } yield s"$name=$value"
      val url = s"${req.url}${queryComponents.mkString("?", "&", "")}"
      auth.fold(logger.info(s"curl -X $method $url")) { _ =>
        logger.info(s"curl -X $method -u '[REDACTED]:' $url")
      }
      req
    }

    def _executeRequest(
      method: String,
      path: String,
      queryParameters: Seq[(String, String)] = Nil,
      requestHeaders: Seq[(String, String)] = Nil,
      body: Option[play.api.libs.json.JsValue] = None
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[play.api.libs.ws.WSResponse] = {
      method.toUpperCase match {
        case "GET" => {
          _logRequest("GET", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).get()
        }
        case "POST" => {
          _logRequest("POST", _requestHolder(path).withHeaders(_withJsonContentType(requestHeaders):_*).withQueryString(queryParameters:_*)).post(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PUT" => {
          _logRequest("PUT", _requestHolder(path).withHeaders(_withJsonContentType(requestHeaders):_*).withQueryString(queryParameters:_*)).put(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PATCH" => {
          _logRequest("PATCH", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).patch(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "DELETE" => {
          _logRequest("DELETE", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).delete()
        }
         case "HEAD" => {
          _logRequest("HEAD", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).head()
        }
         case "OPTIONS" => {
          _logRequest("OPTIONS", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).options()
        }
        case _ => {
          _logRequest(method, _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*))
          sys.error("Unsupported method[%s]".format(method))
        }
      }
    }

    /**
     * Adds a Content-Type: application/json header unless the specified requestHeaders
     * already contain a Content-Type header
     */
    def _withJsonContentType(headers: Seq[(String, String)]): Seq[(String, String)] = {
      headers.find { _._1.toUpperCase == "CONTENT-TYPE" } match {
        case None => headers ++ Seq(("Content-Type" -> "application/json; charset=UTF-8"))
        case Some(_) => headers
      }
    }

  }

  object Client {

    def parseJson[T](
      className: String,
      r: play.api.libs.ws.WSResponse,
      f: (play.api.libs.json.JsValue => play.api.libs.json.JsResult[T])
    ): T = {
      f(play.api.libs.json.Json.parse(r.body)) match {
        case play.api.libs.json.JsSuccess(x, _) => x
        case play.api.libs.json.JsError(errors) => {
          throw new io.flow.session.internal.v0.errors.FailedRequest(r.status, s"Invalid json for class[" + className + "]: " + errors.mkString(" "))
        }
      }
    }

  }

  sealed trait Authorization
  object Authorization {
    case class Basic(username: String, password: Option[String] = None) extends Authorization
  }

  package interfaces {

    trait Client {
      def baseUrl: String
      def sessions: io.flow.session.internal.v0.Sessions
    }

  }

  trait Sessions {
    def getBySession(
      session: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.session.internal.v0.models.Session]

    def post(
      sessionForm: io.flow.session.internal.v0.models.SessionForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.session.internal.v0.models.Session]

    def putBySession(
      session: String,
      sessionPutForm: io.flow.session.internal.v0.models.SessionPutForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.session.internal.v0.models.Session]

    def putResetBySession(
      session: String,
      sessionForm: io.flow.session.internal.v0.models.SessionForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.session.internal.v0.models.Session]
  }

  package errors {

    import io.flow.common.v0.models.json._
    import io.flow.error.v0.models.json._
    import io.flow.reference.v0.models.json._
    import io.flow.session.internal.v0.models.json._
    import io.flow.shopify.internal.v0.models.json._

    case class GenericErrorResponse(
      response: play.api.libs.ws.WSResponse,
      message: Option[String] = None
    ) extends Exception(message.getOrElse(response.status + ": " + response.body)){
      lazy val genericError = _root_.io.flow.session.internal.v0.Client.parseJson("io.flow.error.v0.models.GenericError", response, _.validate[io.flow.error.v0.models.GenericError])
    }

    case class UnitResponse(status: Int) extends Exception(s"HTTP $status")

    case class FailedRequest(responseCode: Int, message: String, requestUri: Option[_root_.java.net.URI] = None) extends _root_.java.lang.Exception(s"HTTP $responseCode: $message")

  }

}