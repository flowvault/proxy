/**
 * Generated by apidoc - http://www.apidoc.me
 * Service version: 0.1.29
 * apidoc:0.11.36 http://www.apidoc.me/flow/reference/0.1.29/play_2_x_json
 */
package io.flow.reference.v0.models {

  case class Country(
    name: String,
    iso31662: String,
    iso31663: String,
    languages: Seq[String],
    measurementSystem: String,
    defaultCurrency: _root_.scala.Option[String] = None,
    timezones: Seq[String]
  )

  /**
   * ISO 4217 3-character currency code. See https://api.flow.io/reference/currencies
   */
  case class Currency(
    name: String,
    iso42173: String,
    numberDecimals: Int
  )

  /**
   * ISO 639 2-character language code. See https://api.flow.io/reference/languages
   */
  case class Language(
    name: String,
    iso6392: String
  )

  /**
   * A region represents a geographic area of the world. Regions can be countries,
   * continents or other political areas (like the Eurozone).
   */
  case class Region(
    id: String,
    name: String,
    countries: Seq[String],
    currencies: Seq[String],
    languages: Seq[String],
    measurementSystems: Seq[String],
    timezones: Seq[String]
  )

  /**
   * Time zone data is provided by the public IANA time zone database. See
   * http://www.iana.org/time-zones
   */
  case class Timezone(
    name: String,
    description: String,
    offset: Int
  )

}

package io.flow.reference.v0.models {

  package object json {
    import play.api.libs.functional.syntax._
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.json.Reads.DefaultJodaDateReads
    import io.flow.reference.v0.models.json._

    private[v0] implicit val jsonReadsUUID = __.read[String].map(java.util.UUID.fromString)

    private[v0] implicit val jsonWritesUUID = new Writes[java.util.UUID] {
      def writes(x: java.util.UUID) = JsString(x.toString)
    }

    private[v0] implicit val jsonWritesJodaDateTime = new Writes[org.joda.time.DateTime] {
      def writes(x: org.joda.time.DateTime) = {
        import org.joda.time.format.ISODateTimeFormat.dateTime
        val str = dateTime.print(x)
        JsString(str)
      }
    }

    implicit def jsonReadsReferenceCountry: play.api.libs.json.Reads[Country] = {
      (
        (__ \ "name").read[String] and
        (__ \ "iso_3166_2").read[String] and
        (__ \ "iso_3166_3").read[String] and
        (__ \ "languages").read[Seq[String]] and
        (__ \ "measurement_system").read[String] and
        (__ \ "default_currency").readNullable[String] and
        (__ \ "timezones").read[Seq[String]]
      )(Country.apply _)
    }

    def jsObjectCountry(obj: io.flow.reference.v0.models.Country) = {
      play.api.libs.json.Json.obj(
        "name" -> play.api.libs.json.JsString(obj.name),
        "iso_3166_2" -> play.api.libs.json.JsString(obj.iso31662),
        "iso_3166_3" -> play.api.libs.json.JsString(obj.iso31663),
        "languages" -> play.api.libs.json.Json.toJson(obj.languages),
        "measurement_system" -> play.api.libs.json.JsString(obj.measurementSystem),
        "timezones" -> play.api.libs.json.Json.toJson(obj.timezones)
      ) ++ (obj.defaultCurrency match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("default_currency" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesReferenceCountry: play.api.libs.json.Writes[Country] = {
      new play.api.libs.json.Writes[io.flow.reference.v0.models.Country] {
        def writes(obj: io.flow.reference.v0.models.Country) = {
          jsObjectCountry(obj)
        }
      }
    }

    implicit def jsonReadsReferenceCurrency: play.api.libs.json.Reads[Currency] = {
      (
        (__ \ "name").read[String] and
        (__ \ "iso_4217_3").read[String] and
        (__ \ "number_decimals").read[Int]
      )(Currency.apply _)
    }

    def jsObjectCurrency(obj: io.flow.reference.v0.models.Currency) = {
      play.api.libs.json.Json.obj(
        "name" -> play.api.libs.json.JsString(obj.name),
        "iso_4217_3" -> play.api.libs.json.JsString(obj.iso42173),
        "number_decimals" -> play.api.libs.json.JsNumber(obj.numberDecimals)
      )
    }

    implicit def jsonWritesReferenceCurrency: play.api.libs.json.Writes[Currency] = {
      new play.api.libs.json.Writes[io.flow.reference.v0.models.Currency] {
        def writes(obj: io.flow.reference.v0.models.Currency) = {
          jsObjectCurrency(obj)
        }
      }
    }

    implicit def jsonReadsReferenceLanguage: play.api.libs.json.Reads[Language] = {
      (
        (__ \ "name").read[String] and
        (__ \ "iso_639_2").read[String]
      )(Language.apply _)
    }

    def jsObjectLanguage(obj: io.flow.reference.v0.models.Language) = {
      play.api.libs.json.Json.obj(
        "name" -> play.api.libs.json.JsString(obj.name),
        "iso_639_2" -> play.api.libs.json.JsString(obj.iso6392)
      )
    }

    implicit def jsonWritesReferenceLanguage: play.api.libs.json.Writes[Language] = {
      new play.api.libs.json.Writes[io.flow.reference.v0.models.Language] {
        def writes(obj: io.flow.reference.v0.models.Language) = {
          jsObjectLanguage(obj)
        }
      }
    }

    implicit def jsonReadsReferenceRegion: play.api.libs.json.Reads[Region] = {
      (
        (__ \ "id").read[String] and
        (__ \ "name").read[String] and
        (__ \ "countries").read[Seq[String]] and
        (__ \ "currencies").read[Seq[String]] and
        (__ \ "languages").read[Seq[String]] and
        (__ \ "measurement_systems").read[Seq[String]] and
        (__ \ "timezones").read[Seq[String]]
      )(Region.apply _)
    }

    def jsObjectRegion(obj: io.flow.reference.v0.models.Region) = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "name" -> play.api.libs.json.JsString(obj.name),
        "countries" -> play.api.libs.json.Json.toJson(obj.countries),
        "currencies" -> play.api.libs.json.Json.toJson(obj.currencies),
        "languages" -> play.api.libs.json.Json.toJson(obj.languages),
        "measurement_systems" -> play.api.libs.json.Json.toJson(obj.measurementSystems),
        "timezones" -> play.api.libs.json.Json.toJson(obj.timezones)
      )
    }

    implicit def jsonWritesReferenceRegion: play.api.libs.json.Writes[Region] = {
      new play.api.libs.json.Writes[io.flow.reference.v0.models.Region] {
        def writes(obj: io.flow.reference.v0.models.Region) = {
          jsObjectRegion(obj)
        }
      }
    }

    implicit def jsonReadsReferenceTimezone: play.api.libs.json.Reads[Timezone] = {
      (
        (__ \ "name").read[String] and
        (__ \ "description").read[String] and
        (__ \ "offset").read[Int]
      )(Timezone.apply _)
    }

    def jsObjectTimezone(obj: io.flow.reference.v0.models.Timezone) = {
      play.api.libs.json.Json.obj(
        "name" -> play.api.libs.json.JsString(obj.name),
        "description" -> play.api.libs.json.JsString(obj.description),
        "offset" -> play.api.libs.json.JsNumber(obj.offset)
      )
    }

    implicit def jsonWritesReferenceTimezone: play.api.libs.json.Writes[Timezone] = {
      new play.api.libs.json.Writes[io.flow.reference.v0.models.Timezone] {
        def writes(obj: io.flow.reference.v0.models.Timezone) = {
          jsObjectTimezone(obj)
        }
      }
    }
  }
}

package io.flow.reference.v0 {

  object Bindables {

    import play.api.mvc.{PathBindable, QueryStringBindable}
    import org.joda.time.{DateTime, LocalDate}
    import org.joda.time.format.ISODateTimeFormat
    import io.flow.reference.v0.models._

    // Type: date-time-iso8601
    implicit val pathBindableTypeDateTimeIso8601 = new PathBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    implicit val queryStringBindableTypeDateTimeIso8601 = new QueryStringBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    // Type: date-iso8601
    implicit val pathBindableTypeDateIso8601 = new PathBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )

    implicit val queryStringBindableTypeDateIso8601 = new QueryStringBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )



  }

}
