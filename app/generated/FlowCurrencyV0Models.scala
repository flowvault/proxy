/**
 * Generated by API Builder - https://www.apibuilder.io
 * Service version: 0.7.56
 * apibuilder 0.14.75 app.apibuilder.io/flow/currency/0.7.56/play_2_x_json
 */
package io.flow.currency.v0.models {

  /**
   * Represents organization-specific currency conversion adjustments.
   * 
   * @param base The base currency's ISO 4217 3-character code as defined in
   *        https://api.flow.io/reference/currencies
   * @param target The target currency's ISO 4217 3-character code as defined in
   *        https://api.flow.io/reference/currencies
   * @param margin A percent of the base currency value added to the base currency before
   *        conversion.
   */
  final case class OrganizationCurrencySetting(
    id: String,
    base: String,
    target: String,
    margin: BigDecimal
  )

  /**
   * Represents the parts of an organization setting that can be updated.
   * 
   * @param base The base currency's ISO 4217 3-character code as defined in
   *        https://api.flow.io/reference/currencies
   * @param target The target currency's ISO 4217 3-character code as defined in
   *        https://api.flow.io/reference/currencies
   * @param margin A percent of the base currency value added to the base currency before
   *        conversion.
   */
  final case class OrganizationCurrencySettingForm(
    base: String,
    target: String,
    margin: BigDecimal
  )

  final case class OrganizationCurrencySettingVersion(
    id: String,
    timestamp: _root_.org.joda.time.DateTime,
    `type`: io.flow.common.v0.models.ChangeType,
    organizationCurrencySetting: io.flow.currency.v0.models.OrganizationCurrencySetting
  )

  /**
   * Represents an organization-specific currency conversion rate at a point in time.
   * 
   * @param base The base currency's ISO 4217 3-character code as defined in
   *        https://api.flow.io/reference/currencies
   * @param target The target currency's ISO 4217 3-character code as defined in
   *        https://api.flow.io/reference/currencies
   * @param effectiveAt The time at which this rate is effective.
   * @param value The actual conversion rate from the base currency to target currency including
   *        any applicable margins.
   */
  final case class Rate(
    id: String,
    base: String,
    target: String,
    effectiveAt: _root_.org.joda.time.DateTime,
    value: BigDecimal
  )

  /**
   * Represents the parts of an organization rate that can be updated.
   * 
   * @param base The base currency's ISO 4217 3-character code as defined in
   *        https://api.flow.io/reference/currencies
   * @param target The target currency's ISO 4217 3-character code as defined in
   *        https://api.flow.io/reference/currencies
   * @param effectiveAt The time at which this rate is effective.
   */
  final case class RateForm(
    base: String,
    target: String,
    effectiveAt: _root_.org.joda.time.DateTime
  )

  final case class RateVersion(
    id: String,
    timestamp: _root_.org.joda.time.DateTime,
    `type`: io.flow.common.v0.models.ChangeType,
    rate: io.flow.currency.v0.models.Rate
  )

  /**
   * Indicates the type of the rate
   */
  sealed trait RateType extends _root_.scala.Product with _root_.scala.Serializable

  object RateType {

    /**
     * Represents a Flow rate type (which excludes currency margins)
     */
    case object Flow extends RateType { override def toString = "flow" }
    /**
     * Represents an organization rate type (which includes currency margins)
     */
    case object Organization extends RateType { override def toString = "organization" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    final case class UNDEFINED(override val toString: String) extends RateType

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[RateType] = scala.List(Flow, Organization)

    private[this]
    val byName: Map[String, RateType] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): RateType = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[RateType] = byName.get(value.toLowerCase)

  }

}

package io.flow.currency.v0.models {

  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import io.flow.common.v0.models.json._
    import io.flow.currency.v0.models.json._
    import io.flow.error.v0.models.json._
    import io.flow.permission.v0.models.json._

    private[v0] implicit val jsonReadsUUID = __.read[String].map { str =>
      _root_.java.util.UUID.fromString(str)
    }

    private[v0] implicit val jsonWritesUUID = new Writes[_root_.java.util.UUID] {
      def writes(x: _root_.java.util.UUID) = JsString(x.toString)
    }

    private[v0] implicit val jsonReadsJodaDateTime = __.read[String].map { str =>
      _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseDateTime(str)
    }

    private[v0] implicit val jsonWritesJodaDateTime = new Writes[_root_.org.joda.time.DateTime] {
      def writes(x: _root_.org.joda.time.DateTime) = {
        JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(x))
      }
    }

    private[v0] implicit val jsonReadsJodaLocalDate = __.read[String].map { str =>
      _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseLocalDate(str)
    }

    private[v0] implicit val jsonWritesJodaLocalDate = new Writes[_root_.org.joda.time.LocalDate] {
      def writes(x: _root_.org.joda.time.LocalDate) = {
        JsString(_root_.org.joda.time.format.ISODateTimeFormat.date.print(x))
      }
    }

    implicit val jsonReadsCurrencyRateType = new play.api.libs.json.Reads[io.flow.currency.v0.models.RateType] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.currency.v0.models.RateType] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.currency.v0.models.RateType(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.currency.v0.models.RateType(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesCurrencyRateType(obj: io.flow.currency.v0.models.RateType) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectRateType(obj: io.flow.currency.v0.models.RateType) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesCurrencyRateType: play.api.libs.json.Writes[RateType] = {
      new play.api.libs.json.Writes[io.flow.currency.v0.models.RateType] {
        def writes(obj: io.flow.currency.v0.models.RateType) = {
          jsonWritesCurrencyRateType(obj)
        }
      }
    }

    implicit def jsonReadsCurrencyOrganizationCurrencySetting: play.api.libs.json.Reads[OrganizationCurrencySetting] = {
      for {
        id <- (__ \ "id").read[String]
        base <- (__ \ "base").read[String]
        target <- (__ \ "target").read[String]
        margin <- (__ \ "margin").read[BigDecimal]
      } yield OrganizationCurrencySetting(id, base, target, margin)
    }

    def jsObjectOrganizationCurrencySetting(obj: io.flow.currency.v0.models.OrganizationCurrencySetting): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "base" -> play.api.libs.json.JsString(obj.base),
        "target" -> play.api.libs.json.JsString(obj.target),
        "margin" -> play.api.libs.json.JsNumber(obj.margin)
      )
    }

    implicit def jsonWritesCurrencyOrganizationCurrencySetting: play.api.libs.json.Writes[OrganizationCurrencySetting] = {
      new play.api.libs.json.Writes[io.flow.currency.v0.models.OrganizationCurrencySetting] {
        def writes(obj: io.flow.currency.v0.models.OrganizationCurrencySetting) = {
          jsObjectOrganizationCurrencySetting(obj)
        }
      }
    }

    implicit def jsonReadsCurrencyOrganizationCurrencySettingForm: play.api.libs.json.Reads[OrganizationCurrencySettingForm] = {
      for {
        base <- (__ \ "base").read[String]
        target <- (__ \ "target").read[String]
        margin <- (__ \ "margin").read[BigDecimal]
      } yield OrganizationCurrencySettingForm(base, target, margin)
    }

    def jsObjectOrganizationCurrencySettingForm(obj: io.flow.currency.v0.models.OrganizationCurrencySettingForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "base" -> play.api.libs.json.JsString(obj.base),
        "target" -> play.api.libs.json.JsString(obj.target),
        "margin" -> play.api.libs.json.JsNumber(obj.margin)
      )
    }

    implicit def jsonWritesCurrencyOrganizationCurrencySettingForm: play.api.libs.json.Writes[OrganizationCurrencySettingForm] = {
      new play.api.libs.json.Writes[io.flow.currency.v0.models.OrganizationCurrencySettingForm] {
        def writes(obj: io.flow.currency.v0.models.OrganizationCurrencySettingForm) = {
          jsObjectOrganizationCurrencySettingForm(obj)
        }
      }
    }

    implicit def jsonReadsCurrencyOrganizationCurrencySettingVersion: play.api.libs.json.Reads[OrganizationCurrencySettingVersion] = {
      for {
        id <- (__ \ "id").read[String]
        timestamp <- (__ \ "timestamp").read[_root_.org.joda.time.DateTime]
        `type` <- (__ \ "type").read[io.flow.common.v0.models.ChangeType]
        organizationCurrencySetting <- (__ \ "organization_currency_setting").read[io.flow.currency.v0.models.OrganizationCurrencySetting]
      } yield OrganizationCurrencySettingVersion(id, timestamp, `type`, organizationCurrencySetting)
    }

    def jsObjectOrganizationCurrencySettingVersion(obj: io.flow.currency.v0.models.OrganizationCurrencySettingVersion): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "timestamp" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.timestamp)),
        "type" -> play.api.libs.json.JsString(obj.`type`.toString),
        "organization_currency_setting" -> jsObjectOrganizationCurrencySetting(obj.organizationCurrencySetting)
      )
    }

    implicit def jsonWritesCurrencyOrganizationCurrencySettingVersion: play.api.libs.json.Writes[OrganizationCurrencySettingVersion] = {
      new play.api.libs.json.Writes[io.flow.currency.v0.models.OrganizationCurrencySettingVersion] {
        def writes(obj: io.flow.currency.v0.models.OrganizationCurrencySettingVersion) = {
          jsObjectOrganizationCurrencySettingVersion(obj)
        }
      }
    }

    implicit def jsonReadsCurrencyRate: play.api.libs.json.Reads[Rate] = {
      for {
        id <- (__ \ "id").read[String]
        base <- (__ \ "base").read[String]
        target <- (__ \ "target").read[String]
        effectiveAt <- (__ \ "effective_at").read[_root_.org.joda.time.DateTime]
        value <- (__ \ "value").read[BigDecimal]
      } yield Rate(id, base, target, effectiveAt, value)
    }

    def jsObjectRate(obj: io.flow.currency.v0.models.Rate): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "base" -> play.api.libs.json.JsString(obj.base),
        "target" -> play.api.libs.json.JsString(obj.target),
        "effective_at" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.effectiveAt)),
        "value" -> play.api.libs.json.JsNumber(obj.value)
      )
    }

    implicit def jsonWritesCurrencyRate: play.api.libs.json.Writes[Rate] = {
      new play.api.libs.json.Writes[io.flow.currency.v0.models.Rate] {
        def writes(obj: io.flow.currency.v0.models.Rate) = {
          jsObjectRate(obj)
        }
      }
    }

    implicit def jsonReadsCurrencyRateForm: play.api.libs.json.Reads[RateForm] = {
      for {
        base <- (__ \ "base").read[String]
        target <- (__ \ "target").read[String]
        effectiveAt <- (__ \ "effective_at").read[_root_.org.joda.time.DateTime]
      } yield RateForm(base, target, effectiveAt)
    }

    def jsObjectRateForm(obj: io.flow.currency.v0.models.RateForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "base" -> play.api.libs.json.JsString(obj.base),
        "target" -> play.api.libs.json.JsString(obj.target),
        "effective_at" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.effectiveAt))
      )
    }

    implicit def jsonWritesCurrencyRateForm: play.api.libs.json.Writes[RateForm] = {
      new play.api.libs.json.Writes[io.flow.currency.v0.models.RateForm] {
        def writes(obj: io.flow.currency.v0.models.RateForm) = {
          jsObjectRateForm(obj)
        }
      }
    }

    implicit def jsonReadsCurrencyRateVersion: play.api.libs.json.Reads[RateVersion] = {
      for {
        id <- (__ \ "id").read[String]
        timestamp <- (__ \ "timestamp").read[_root_.org.joda.time.DateTime]
        `type` <- (__ \ "type").read[io.flow.common.v0.models.ChangeType]
        rate <- (__ \ "rate").read[io.flow.currency.v0.models.Rate]
      } yield RateVersion(id, timestamp, `type`, rate)
    }

    def jsObjectRateVersion(obj: io.flow.currency.v0.models.RateVersion): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "timestamp" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.timestamp)),
        "type" -> play.api.libs.json.JsString(obj.`type`.toString),
        "rate" -> jsObjectRate(obj.rate)
      )
    }

    implicit def jsonWritesCurrencyRateVersion: play.api.libs.json.Writes[RateVersion] = {
      new play.api.libs.json.Writes[io.flow.currency.v0.models.RateVersion] {
        def writes(obj: io.flow.currency.v0.models.RateVersion) = {
          jsObjectRateVersion(obj)
        }
      }
    }
  }
}

package io.flow.currency.v0 {

  object Bindables {

    import play.api.mvc.{PathBindable, QueryStringBindable}

    // import models directly for backwards compatibility with prior versions of the generator
    import Core._
    import Models._

    object Core {
      implicit def pathBindableDateTimeIso8601(implicit stringBinder: QueryStringBindable[String]): PathBindable[_root_.org.joda.time.DateTime] = ApibuilderPathBindable(ApibuilderTypes.dateTimeIso8601)
      implicit def queryStringBindableDateTimeIso8601(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[_root_.org.joda.time.DateTime] = ApibuilderQueryStringBindable(ApibuilderTypes.dateTimeIso8601)

      implicit def pathBindableDateIso8601(implicit stringBinder: QueryStringBindable[String]): PathBindable[_root_.org.joda.time.LocalDate] = ApibuilderPathBindable(ApibuilderTypes.dateIso8601)
      implicit def queryStringBindableDateIso8601(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[_root_.org.joda.time.LocalDate] = ApibuilderQueryStringBindable(ApibuilderTypes.dateIso8601)
    }

    object Models {
      import io.flow.currency.v0.models._

      val rateTypeConverter: ApibuilderTypeConverter[io.flow.currency.v0.models.RateType] = new ApibuilderTypeConverter[io.flow.currency.v0.models.RateType] {
        override def convert(value: String): io.flow.currency.v0.models.RateType = io.flow.currency.v0.models.RateType(value)
        override def convert(value: io.flow.currency.v0.models.RateType): String = value.toString
        override def example: io.flow.currency.v0.models.RateType = io.flow.currency.v0.models.RateType.Flow
        override def validValues: Seq[io.flow.currency.v0.models.RateType] = io.flow.currency.v0.models.RateType.all
      }
      implicit def pathBindableRateType(implicit stringBinder: QueryStringBindable[String]): PathBindable[io.flow.currency.v0.models.RateType] = ApibuilderPathBindable(rateTypeConverter)
      implicit def queryStringBindableRateType(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[io.flow.currency.v0.models.RateType] = ApibuilderQueryStringBindable(rateTypeConverter)
    }

    trait ApibuilderTypeConverter[T] {

      def convert(value: String): T

      def convert(value: T): String

      def example: T

      def validValues: Seq[T] = Nil

      def errorMessage(key: String, value: String, ex: java.lang.Exception): String = {
        val base = s"Invalid value '$value' for parameter '$key'. "
        validValues.toList match {
          case Nil => base + "Ex: " + convert(example)
          case values => base + ". Valid values are: " + values.mkString("'", "', '", "'")
        }
      }
    }

    object ApibuilderTypes {
      val dateTimeIso8601: ApibuilderTypeConverter[_root_.org.joda.time.DateTime] = new ApibuilderTypeConverter[_root_.org.joda.time.DateTime] {
        override def convert(value: String): _root_.org.joda.time.DateTime = _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseDateTime(value)
        override def convert(value: _root_.org.joda.time.DateTime): String = _root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(value)
        override def example: _root_.org.joda.time.DateTime = _root_.org.joda.time.DateTime.now
      }

      val dateIso8601: ApibuilderTypeConverter[_root_.org.joda.time.LocalDate] = new ApibuilderTypeConverter[_root_.org.joda.time.LocalDate] {
        override def convert(value: String): _root_.org.joda.time.LocalDate = _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseLocalDate(value)
        override def convert(value: _root_.org.joda.time.LocalDate): String = _root_.org.joda.time.format.ISODateTimeFormat.date.print(value)
        override def example: _root_.org.joda.time.LocalDate = _root_.org.joda.time.LocalDate.now
      }
    }

    final case class ApibuilderQueryStringBindable[T](
      converters: ApibuilderTypeConverter[T]
    ) extends QueryStringBindable[T] {

      override def bind(key: String, params: Map[String, Seq[String]]): _root_.scala.Option[_root_.scala.Either[String, T]] = {
        params.getOrElse(key, Nil).headOption.map { v =>
          try {
            Right(
              converters.convert(v)
            )
          } catch {
            case ex: java.lang.Exception => Left(
              converters.errorMessage(key, v, ex)
            )
          }
        }
      }

      override def unbind(key: String, value: T): String = {
        s"$key=${converters.convert(value)}"
      }
    }

    final case class ApibuilderPathBindable[T](
      converters: ApibuilderTypeConverter[T]
    ) extends PathBindable[T] {

      override def bind(key: String, value: String): _root_.scala.Either[String, T] = {
        try {
          Right(
            converters.convert(value)
          )
        } catch {
          case ex: java.lang.Exception => Left(
            converters.errorMessage(key, value, ex)
          )
        }
      }

      override def unbind(key: String, value: T): String = {
        converters.convert(value)
      }
    }

  }

}
